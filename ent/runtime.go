// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/d-exclaimation/exclaimation-api/ent/post"
	"github.com/d-exclaimation/exclaimation-api/ent/profile"
	"github.com/d-exclaimation/exclaimation-api/ent/repo"
	"github.com/d-exclaimation/exclaimation-api/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[0].Descriptor()
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = postDescTitle.Validators[0].(func(string) error)
	// postDescBody is the schema descriptor for body field.
	postDescBody := postFields[1].Descriptor()
	// post.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	post.BodyValidator = postDescBody.Validators[0].(func(string) error)
	// postDescCrabrave is the schema descriptor for crabrave field.
	postDescCrabrave := postFields[2].Descriptor()
	// post.DefaultCrabrave holds the default value on creation for the crabrave field.
	post.DefaultCrabrave = postDescCrabrave.Default.(int)
	profileFields := schema.Profile{}.Fields()
	_ = profileFields
	// profileDescName is the schema descriptor for name field.
	profileDescName := profileFields[0].Descriptor()
	// profile.NameValidator is a validator for the "name" field. It is called by the builders before save.
	profile.NameValidator = profileDescName.Validators[0].(func(string) error)
	// profileDescGithubURL is the schema descriptor for github_url field.
	profileDescGithubURL := profileFields[2].Descriptor()
	// profile.GithubURLValidator is a validator for the "github_url" field. It is called by the builders before save.
	profile.GithubURLValidator = profileDescGithubURL.Validators[0].(func(string) error)
	// profileDescLocation is the schema descriptor for location field.
	profileDescLocation := profileFields[3].Descriptor()
	// profile.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	profile.LocationValidator = profileDescLocation.Validators[0].(func(string) error)
	// profileDescFollowers is the schema descriptor for followers field.
	profileDescFollowers := profileFields[7].Descriptor()
	// profile.FollowersValidator is a validator for the "followers" field. It is called by the builders before save.
	profile.FollowersValidator = profileDescFollowers.Validators[0].(func(int) error)
	// profileDescFollowing is the schema descriptor for following field.
	profileDescFollowing := profileFields[8].Descriptor()
	// profile.FollowingValidator is a validator for the "following" field. It is called by the builders before save.
	profile.FollowingValidator = profileDescFollowing.Validators[0].(func(int) error)
	repoFields := schema.Repo{}.Fields()
	_ = repoFields
	// repoDescName is the schema descriptor for name field.
	repoDescName := repoFields[0].Descriptor()
	// repo.NameValidator is a validator for the "name" field. It is called by the builders before save.
	repo.NameValidator = repoDescName.Validators[0].(func(string) error)
	// repoDescRepoName is the schema descriptor for repo_name field.
	repoDescRepoName := repoFields[1].Descriptor()
	// repo.RepoNameValidator is a validator for the "repo_name" field. It is called by the builders before save.
	repo.RepoNameValidator = repoDescRepoName.Validators[0].(func(string) error)
}
