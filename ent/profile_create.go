// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/d-exclaimation/exclaimation-api/ent/profile"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProfileCreate) SetName(s string) *ProfileCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetAvatarURL sets the "avatar_url" field.
func (pc *ProfileCreate) SetAvatarURL(s string) *ProfileCreate {
	pc.mutation.SetAvatarURL(s)
	return pc
}

// SetGithubURL sets the "github_url" field.
func (pc *ProfileCreate) SetGithubURL(s string) *ProfileCreate {
	pc.mutation.SetGithubURL(s)
	return pc
}

// SetLocation sets the "location" field.
func (pc *ProfileCreate) SetLocation(s string) *ProfileCreate {
	pc.mutation.SetLocation(s)
	return pc
}

// SetBio sets the "bio" field.
func (pc *ProfileCreate) SetBio(s string) *ProfileCreate {
	pc.mutation.SetBio(s)
	return pc
}

// SetTwitterUsername sets the "twitter_username" field.
func (pc *ProfileCreate) SetTwitterUsername(s string) *ProfileCreate {
	pc.mutation.SetTwitterUsername(s)
	return pc
}

// SetPublicRepo sets the "public_repo" field.
func (pc *ProfileCreate) SetPublicRepo(i int) *ProfileCreate {
	pc.mutation.SetPublicRepo(i)
	return pc
}

// SetFollowers sets the "followers" field.
func (pc *ProfileCreate) SetFollowers(i int) *ProfileCreate {
	pc.mutation.SetFollowers(i)
	return pc
}

// SetFollowing sets the "following" field.
func (pc *ProfileCreate) SetFollowing(i int) *ProfileCreate {
	pc.mutation.SetFollowing(i)
	return pc
}

// SetLastUpdated sets the "last_updated" field.
func (pc *ProfileCreate) SetLastUpdated(t time.Time) *ProfileCreate {
	pc.mutation.SetLastUpdated(t)
	return pc
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	var (
		err  error
		node *Profile
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := profile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New("ent: missing required field \"avatar_url\"")}
	}
	if _, ok := pc.mutation.GithubURL(); !ok {
		return &ValidationError{Name: "github_url", err: errors.New("ent: missing required field \"github_url\"")}
	}
	if v, ok := pc.mutation.GithubURL(); ok {
		if err := profile.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf("ent: validator failed for field \"github_url\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New("ent: missing required field \"location\"")}
	}
	if v, ok := pc.mutation.Location(); ok {
		if err := profile.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf("ent: validator failed for field \"location\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Bio(); !ok {
		return &ValidationError{Name: "bio", err: errors.New("ent: missing required field \"bio\"")}
	}
	if _, ok := pc.mutation.TwitterUsername(); !ok {
		return &ValidationError{Name: "twitter_username", err: errors.New("ent: missing required field \"twitter_username\"")}
	}
	if _, ok := pc.mutation.PublicRepo(); !ok {
		return &ValidationError{Name: "public_repo", err: errors.New("ent: missing required field \"public_repo\"")}
	}
	if _, ok := pc.mutation.Followers(); !ok {
		return &ValidationError{Name: "followers", err: errors.New("ent: missing required field \"followers\"")}
	}
	if v, ok := pc.mutation.Followers(); ok {
		if err := profile.FollowersValidator(v); err != nil {
			return &ValidationError{Name: "followers", err: fmt.Errorf("ent: validator failed for field \"followers\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Following(); !ok {
		return &ValidationError{Name: "following", err: errors.New("ent: missing required field \"following\"")}
	}
	if v, ok := pc.mutation.Following(); ok {
		if err := profile.FollowingValidator(v); err != nil {
			return &ValidationError{Name: "following", err: fmt.Errorf("ent: validator failed for field \"following\": %w", err)}
		}
	}
	if _, ok := pc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New("ent: missing required field \"last_updated\"")}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profile.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.AvatarURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldAvatarURL,
		})
		_node.AvatarURL = value
	}
	if value, ok := pc.mutation.GithubURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldGithubURL,
		})
		_node.GithubURL = value
	}
	if value, ok := pc.mutation.Location(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldLocation,
		})
		_node.Location = value
	}
	if value, ok := pc.mutation.Bio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldBio,
		})
		_node.Bio = value
	}
	if value, ok := pc.mutation.TwitterUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldTwitterUsername,
		})
		_node.TwitterUsername = value
	}
	if value, ok := pc.mutation.PublicRepo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profile.FieldPublicRepo,
		})
		_node.PublicRepo = value
	}
	if value, ok := pc.mutation.Followers(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profile.FieldFollowers,
		})
		_node.Followers = value
	}
	if value, ok := pc.mutation.Following(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: profile.FieldFollowing,
		})
		_node.Following = value
	}
	if value, ok := pc.mutation.LastUpdated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profile.FieldLastUpdated,
		})
		_node.LastUpdated = value
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
